// This url is generated by ngrok everytime you open the terminal, and will be used to send requests to the server. 
// This is done because the server is running on localhost and can't be accessed from Google Docs.
var urlDeBaza="https://d9ed-2a02-2f00-c307-1800-55f1-5e48-d5b1-3781.ngrok-free.app";

function onOpen() {
    // "extension" menu that will be added to the Google Docs UI
  var ui = DocumentApp.getUi();
  ui.createMenu("Extensia GSCR")
    .addItem("Trimite tot textul la server", "sendTextToServer")
    .addItem("Trimite selecția la server", "sendSelectionToServer")
    .addItem("Vezi sugestii de corectare pentru selecție", "seeSugestionsForSelection")
    .addItem("Vezi sinonime","seeSynonyms")
    .addToUi();
}

function showSuggestionsDialog(suggestions) {
    // this function opens a dialog with the suggestions generated for the selected text
  var template = HtmlService.createTemplateFromFile('SuggestionsDialog');
  template.suggestions = suggestions;
  var html = template.evaluate().setWidth(400).setHeight(300);
  DocumentApp.getUi().showModalDialog(html, 'Sugestii pentru textul selectat');
}
function showSynonymsDialog(suggestions) {
    // this function opens a dialog with the synonyms generated for the selected text
  var template = HtmlService.createTemplateFromFile('SynonymsDialog');
  template.suggestions = suggestions;
  var html = template.evaluate().setWidth(400).setHeight(300);
  DocumentApp.getUi().showModalDialog(html, 'Sinonime pentru textul selectat');
}

function replaceSelectedText(newText, suggestions) {
    // function that is called from the dialog window to replace the selected text with the suggested correction that was pressed
  var doc = DocumentApp.getActiveDocument();
  var selection = doc.getSelection();

  if (!selection) return;

  var elements = selection.getRangeElements();

  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];
    if (!el.getElement().editAsText) continue;

    var textElement = el.getElement().editAsText();
    var start = el.getStartOffset();
    var end = el.getEndOffsetInclusive();

    if (start !== -1 && end !== -1) {
      // the original text has to be sent to the server as part of the feedback
      var originalText = textElement.getText().substring(start, end + 1);
      textElement.deleteText(start, end);
      textElement.insertText(start, newText);

      // send the chosen suggestion to the server as feedback, to improve the model
      var apiUrl = `${urlDeBaza}/feedback`; // will be calling the feedback endpoint
      var payload = {
        original: originalText,
        suggestions: suggestions,
        chosen: newText
      };

      var options = {
        method: 'post',
        contentType: 'application/json',
        payload: JSON.stringify(payload),
      };

      var response = UrlFetchApp.fetch(apiUrl, options);
      Logger.log(response.getContentText());

      break;
    }
  }
}

function replaceSelectedTextWithSynonym(newText){
    // function that is called from the dialog to replace the selected text with the synonym that was pressed 
 var doc = DocumentApp.getActiveDocument();
  var selection = doc.getSelection();

  if (!selection) return;

  var elements = selection.getRangeElements();

  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];
    if (!el.getElement().editAsText) continue;

    var textElement = el.getElement().editAsText();
    var start = el.getStartOffset();
    var end = el.getEndOffsetInclusive();

    if (start !== -1 && end !== -1) {

      textElement.deleteText(start, end);
      textElement.insertText(start, newText);
      break;
    }
  }
}



function seeSugestionsForSelection(){
    // see suggestions for the selected text
  var doc = DocumentApp.getActiveDocument();
  var selection = doc.getSelection();

  if (!selection) {
    DocumentApp.getUi().alert("Nu ai selectat niciun text!");
    return;
  }

  var elements = selection.getRangeElements();
  var selectedText = '';
  var textParts = [];

  // going through the selection and getting only the text elements
  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];
    if (!el.getElement().editAsText) continue;

    var textElement = el.getElement().editAsText();
    var start = el.getStartOffset();
    var end = el.getEndOffsetInclusive();

    if (start !== -1 && end !== -1) {
      var part = textElement.getText().substring(start, end + 1);
      textParts.push({ element: textElement, start: start, end: end, original: part });
      selectedText += part + ' ';
    }
  }

  selectedText = selectedText.trim();
  if (!selectedText) {
    DocumentApp.getUi().alert("Selecteaza text valid!");
    return;
  }

  var apiUrl = `${urlDeBaza}/correct`; // will be calling the correct endpoint

  var payload = { text: selectedText };

  var options = {
    method: "POST",
    contentType: "application/json",
    payload: JSON.stringify(payload)
  };

  try {
    var response = UrlFetchApp.fetch(apiUrl, options);
    var jsonResponse = JSON.parse(response.getContentText());
    var suggestions= jsonResponse.suggestions;
    showSuggestionsDialog(suggestions); // this will open a dialog with the suggestions for the selected text

  } catch (error) {
    Logger.log("Eroare la trimiterea cererii: " + error.message);
    DocumentApp.getUi().alert("Eroare: " + error.message);
  }
}

function seeSynonyms(){
    // see synonyms for the selected text 
 var doc = DocumentApp.getActiveDocument();
  var selection = doc.getSelection();

  if (!selection) {
    DocumentApp.getUi().alert("Nu ai selectat niciun text!");
    return;
  }

  var elements = selection.getRangeElements();
  var selectedText = '';
  var textParts = [];

  // luam toata selectia
  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];
    if (!el.getElement().editAsText) continue;

    var textElement = el.getElement().editAsText();
    var start = el.getStartOffset();
    var end = el.getEndOffsetInclusive();

    if (start !== -1 && end !== -1) {
      var part = textElement.getText().substring(start, end + 1);
      textParts.push({ element: textElement, start: start, end: end, original: part });
      selectedText += part + ' ';
    }
  }

  selectedText = selectedText.trim();
  if (!selectedText) {
    DocumentApp.getUi().alert("Selectează text valid!");
    return;
  }

  
  var apiUrl = `${urlDeBaza}/synonym`; // will be calling the synonym endpoint
  var payload = { word: selectedText };

  var options = {
    method: "POST",
    contentType: "application/json",
    payload: JSON.stringify(payload)
  };

  try {
    var response = UrlFetchApp.fetch(apiUrl, options);
    var jsonResponse = JSON.parse(response.getContentText());
    var suggestions= jsonResponse.suggestions;
    showSynonymsDialog(suggestions); // this will open a dialog with the synonyms suggested for the selected text

  } catch (error) {
    Logger.log("Eroare la trimiterea cererii: " + error.message);
    DocumentApp.getUi().alert("Eroare: " + error.message);
  }
}

function sendTextToServer() {
    // send the entire text to the server to be corrected
  var doc = DocumentApp.getActiveDocument();
  var body = doc.getBody();
  var text = body.getText();
  
  
  var apiUrl = `${urlDeBaza}/correct`; // will be calling the correct endpoint
  
  var payload = {
    text: text
  };
  
  var options = {
    method: "POST",
    contentType: "application/json",
    payload: JSON.stringify(payload)
  };
  
  try {

    var response = UrlFetchApp.fetch(apiUrl, options);
    var jsonResponse = JSON.parse(response.getContentText());
    var updatedText = jsonResponse.corrected;
    body.setText(updatedText);

  } catch (error) {
    Logger.log("Eroare la trimiterea cererii: " + error.message);
  }
}


function sendSelectionToServer() {
    // send the selected text to the server to be corrected 
  var doc = DocumentApp.getActiveDocument();
  var selection = doc.getSelection();

  if (!selection) {
    DocumentApp.getUi().alert("Nu ai selectat niciun text!");
    return;
  }

  var elements = selection.getRangeElements();
  var selectedText = '';
  var textParts = [];

  // going through the selection and getting only the text
  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];
    if (!el.getElement().editAsText) continue;

    var textElement = el.getElement().editAsText();
    var start = el.getStartOffset();
    var end = el.getEndOffsetInclusive();

    if (start !== -1 && end !== -1) {
      var part = textElement.getText().substring(start, end + 1);
      textParts.push({ element: textElement, start: start, end: end, original: part });
      selectedText += part + ' ';
    }
  }

  selectedText = selectedText.trim();
  if (!selectedText) {
    DocumentApp.getUi().alert("Selecteaza text valid!");
    return;
  }

  
  var apiUrl = `${urlDeBaza}/correct`; // will be calling the correct endpoint
  var payload = { text: selectedText };

  var options = {
    method: "POST",
    contentType: "application/json",
    payload: JSON.stringify(payload)
  };

  try {
    var response = UrlFetchApp.fetch(apiUrl, options);
    var jsonResponse = JSON.parse(response.getContentText());
    var updatedText = jsonResponse.corrected;

    // delete the initial text and then insert the updated text
    var first = textParts[0];
    first.element.deleteText(first.start, first.end);
    first.element.insertText(first.start, updatedText);

    for (var i = 1; i < textParts.length; i++) {
      var part = textParts[i];
      part.element.deleteText(part.start, part.end);
    }

  } catch (error) {
    Logger.log("Eroare la trimiterea cererii: " + error.message);
    DocumentApp.getUi().alert("Eroare: " + error.message);
  }
}
